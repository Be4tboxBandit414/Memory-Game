{"version":3,"sources":["components/header/Header.jsx","components/card/Card.jsx","components/card/GameOver.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","restartGame","react_default","a","createElement","className","onClick","Card","id","isFlipped","handleClick","cardNumber","clickCheck","react_card_flip_default","flipSpeedBackToFront","flipSpeedFrontToBack","concat","key","disabled","GameOver","App","state","Array","fill","shuffledCard","duplicateCard","sort","Math","random","clickCount","prevSelectedCard","prevCardId","clickDisabled","event","preventDefault","cardId","target","newFlipps","_this","slice","setState","prevState","newCard","previousCard","isCardMatch","setTimeout","card1","card2","card1Id","card2Id","hideCard","flipBack","isGameOver","every","element","index","array","_this2","this","header_Header","card_GameOver","map","card_Card","PureComponent","reduce","preValue","current","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07b0b49f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//Stanley N: This is the Restart Game Component that exists at the top of the application. It allows user to restart the game at any time by the restartGame function.\r\nconst Header = ({ restartGame }) => (\r\n  <div className=\"grid-header-container\">\r\n    <div className=\"restart-container\">\r\n      <button onClick={restartGame} className=\"restart-button\">\r\n        Restart Game\r\n      </button>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport ReactCardFlip from \"react-card-flip\";\r\n\r\n/* Stanley N.: This is the Card Component. The logic below displays how the card behaves -- whether it is on its front or the back (the back displays the value as 'cardnumber').\r\n\r\nhandleClick is the function associated with the onClick event and can be found in App.js. \r\n\r\nclickCheck checks for true or false which would enable or disable the card to be clicked on to help prevent multiple cards being selected */\r\nconst Card = ({ id, isFlipped, handleClick, cardNumber, clickCheck }) => (\r\n  <ReactCardFlip\r\n    isFlipped={isFlipped}\r\n    flipSpeedBackToFront={1}\r\n    flipSpeedFrontToBack={1}\r\n  >\r\n    <button\r\n      id={id}\r\n      className={`card card-front ${cardNumber !== -1 ? \"\" : \"hide-card\"}`}\r\n      onClick={handleClick}\r\n      key=\"front\"\r\n      disabled={clickCheck}\r\n    />\r\n\r\n    <button\r\n      id={id}\r\n      className={`card card-back ${cardNumber !== -1 ? \"\" : \"hide-card\"}`}\r\n      onClick={handleClick}\r\n      key=\"back\"\r\n    >\r\n      {cardNumber}\r\n    </button>\r\n  </ReactCardFlip>\r\n);\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\n//Stanley N: The Game Over Component that will display after user has completed the game with the ability to restart the game with the restartGame function.\r\nconst GameOver = () => (\r\n  <div className=\"justify-center\">\r\n    <h1>Game Over!</h1>\r\n    <h3>Thanks for playing!</h3>\r\n  </div>\r\n);\r\n\r\nexport default GameOver;\r\n","import React, { PureComponent } from \"react\";\nimport Header from \"./components/header/Header\";\nimport Card from \"./components/card/Card\";\nimport GameOver from \"./components/card/GameOver\";\n\nimport \"./styles/main.css\";\n\n/* \nStanley N: Using PureComponent since not needing the full extent of component and is the fastest component we can write.\nstate of the application consists of the following: isFlipped, shuffledCard, clickCount, prevSelectedCard, prevCardId, and clickDisabled\nisFlipped: Array of 24 with false to begin\nshuffledCard: Shuffles the values and sorts them\nclickCount: Click number indicator that resets to 1 after the second card is clicked in handleClick()\nprevSelectedCard: Previously selected card initiated at -1 for safety since the numbers go from 1 to 12\nprevCardId: Previous Card ID initiated at -1 for safety\nclickDisabled: Initally set to false to allow user to click. If state is changed to true then the cards cannot be clicked on.\n*/\nclass App extends PureComponent {\n  state = {\n    isFlipped: Array(24).fill(false),\n    shuffledCard: App.duplicateCard().sort(() => Math.random() - 0.5),\n    clickCount: 1,\n    prevSelectedCard: -1,\n    prevCardId: -1,\n    clickDisabled: false\n  };\n\n  // Stanley N: Duplicates inital values in array\n  static duplicateCard = () => {\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].reduce(\n      (preValue, current, index, array) => {\n        return preValue.concat([current, current]);\n      },\n      []\n    );\n  };\n\n  // Stanley N: Click handler that grabs the id of card clicked and sets it as previously selected card.\n  handleClick = event => {\n    event.preventDefault();\n    const cardId = event.target.id;\n    const newFlipps = this.state.isFlipped.slice();\n    this.setState({\n      prevSelectedCard: this.state.shuffledCard[cardId],\n      prevCardId: cardId\n    });\n\n    // Stanley N: Checks to see if card clicked is flipped or not.\n    if (newFlipps[cardId] === false) {\n      newFlipps[cardId] = !newFlipps[cardId];\n      this.setState(prevState => ({\n        isFlipped: newFlipps,\n        clickCount: this.state.clickCount + 1\n      }));\n\n      // Stanley N: Checks also the click count and resets the clickCount state to 1 if second is clicked. Also setting clickDisabled state to true to prevent mulitple clicks after the second click with a setTimeout to allow for animation and resetting clickDisabled to false to allow user to continue.\n      if (this.state.clickCount === 2) {\n        this.setState({ clickCount: 1 });\n        this.setState({ clickDisabled: true });\n        const prevCardId = this.state.prevCardId;\n        const newCard = this.state.shuffledCard[cardId];\n        const previousCard = this.state.prevSelectedCard;\n\n        this.isCardMatch(previousCard, newCard, prevCardId, cardId);\n        setTimeout(() => {\n          this.setState(prevState => ({\n            clickDisabled: false\n          }));\n        }, 1500);\n      }\n    }\n  };\n\n  // Stanley N: Check for card match by comparing the two cards that are clicked. Flips card if not matched and hides card if matched. Is called in handleClick.\n  isCardMatch = (card1, card2, card1Id, card2Id) => {\n    if (card1 === card2) {\n      const hideCard = this.state.shuffledCard.slice();\n      hideCard[card1Id] = -1;\n      hideCard[card2Id] = -1;\n      setTimeout(() => {\n        this.setState(prevState => ({\n          shuffledCard: hideCard\n        }));\n      }, 1000);\n    } else {\n      const flipBack = this.state.isFlipped.slice();\n      flipBack[card1Id] = false;\n      flipBack[card2Id] = false;\n      setTimeout(() => {\n        this.setState(prevState => ({ isFlipped: flipBack }));\n      }, 1000);\n    }\n  };\n\n  // Stanley N: Restarts the game by resetting the state. Is called in Header component and GameOver component.\n  restartGame = () => {\n    this.setState({\n      isFlipped: Array(24).fill(false),\n      shuffledCard: App.duplicateCard().sort(() => Math.random() - 0.5),\n      clickCount: 1,\n      prevSelectedCard: -1,\n      prevCardId: -1\n    });\n  };\n\n  // Stanley N: Checks for every card is matched. Is called in the render.\n  isGameOver = () => {\n    return this.state.isFlipped.every(\n      (element, index, array) => element !== false\n    );\n  };\n\n  // Stanley N: Renders Application with Header Component, GameOver Component, and Card Component. shuffledCard is called to shuffle and randomly give props to each Card Component.\n  render() {\n    return (\n      <div>\n        <Header restartGame={this.restartGame} />\n        {this.isGameOver() ? (\n          <GameOver restartGame={this.restartGame} />\n        ) : (\n          <div className=\"grid-container\">\n            {this.state.shuffledCard.map((cardNumber, index) => (\n              <Card\n                key={index}\n                id={index}\n                cardNumber={cardNumber}\n                isFlipped={this.state.isFlipped[index]}\n                handleClick={this.handleClick}\n                clickCheck={this.state.clickDisabled}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}